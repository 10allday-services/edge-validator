# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import os

import rapidjson
from flask import Flask, request
from dockerflow.flask import Dockerflow


app = Flask(__name__)
dockerflow = Dockerflow(app)


def load_namespace(base, namespace):
    """Return a dictionary of all files with the `*.schema.json` suffix.

    Namespaces help differentiate ingestion systems. For example, `telemetry`
    refers to pings generated by various Firefox products. Other namespaced
    ingestion pipelines may exists due to generic ingestion.
    """
    schemas = dict()
    for root, _, files in os.walk(os.path.join(base, namespace)):
        for name in files:
            if not name.endswith(".schema.json"):
                continue
            with open(os.path.join(root, name), "r") as f:
                key = name.split(".schema.json")[0]
                schemas[key] = rapidjson.Validator(f.read())
                print("Registered {}.{} ".format(namespace, key))
    return schemas


def load_data():
    """Load schemas into memory while taking advantage of data preloading.
    
    See https://stackoverflow.com/a/42440784
    """

    # Schemas have a naming convention. See `sync.sh` for an example of the ingestion
    # submission format.
    schemas = {}

    # List the separate data ingestion namespaces
    base = "resources/schemas"
    for namespace in os.listdir("resources/schemas"):
        schemas[namespace] = load_namespace(base, namespace)

    versions = {}
    for namespace in schemas.keys():
        ns_version = {}
        for key in schemas[namespace].keys():
            doctype, docversion = key.split('.')
            # take the most recent version determined by string comparison
            ns_version[doctype] = max(versions.get(doctype, '0'), docversion)
        versions[namespace] = ns_version

    return schemas, versions


NAMESPACE_SCHEMAS, SCHEMA_VERSIONS = load_data()


@app.route('/submit/<namespace>/<doctype>',  methods=['POST'])
@app.route('/submit/<namespace>/<doctype>/<docversion>', methods=['POST'])
def submit(namespace, doctype, docversion=None):
    resp = ('OK', 200)
    try:
        docversion = docversion or SCHEMA_VERSIONS[namespace][doctype]
        key = "{}.{}".format(doctype, docversion)
        NAMESPACE_SCHEMAS[namespace][key](request.data)
    except (ValueError, KeyError) as e:
        resp = ("BAD: {}".format(e), 400)
    return resp

