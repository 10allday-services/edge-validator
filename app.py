# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import json
import os

from flask import Flask, request
from jsonschema import validate
from jsonschema.exceptions import ValidationError

app = Flask(__name__)


def load_system_schemas(base, system_id):
    """Return a dictionary of all files with the `*.schema.json` suffix.

    The system_id refers to the namespace for differentiating between
    ingestion pipelines. For example, `telemetry` generally refers to
    pings generated by various Firefox products. Other namespaced ingestion
    pipelines may exists due to generic ingestion.
    """
    schemas = dict()
    for root, _, files in os.walk(os.path.join(base, system_id)):
        for name in files:
            if not name.endswith(".schema.json"):
                continue
            with open(os.path.join(root, name), "r") as f:
                key = name.split(".schema.json")[0]
                schemas[key] = json.load(f)
                print("Registered {} schema with name {} ".format(system_id, key))
    return schemas


def load_data():
    """Load schemas into memory while taking advantage of data preloading.
    
    See https://stackoverflow.com/a/42440784
    """

    # https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/data/common-ping.html
    common_schema = {
            "properties": {
                "type": {"type": "string"},
                "id": {"type": "string"},
                "creationDate": {"type": "string"},
                "version": {"type": "integer"},
                },
            "required": ["type", "id", "creationDate", "version"],
            }

    # Schemas have a naming convention. See `sync.sh` for an example of the ingestion
    # submission format.
    schemas = {}


    # List the separate data ingestion namespaces
    base = "resources/schemas"
    for system_id in os.listdir("resources/schemas"):
        schemas[system_id] = load_system_schemas(base, system_id)

    return common_schema, schemas


@app.route('/<system_id>', methods=['POST'])
def index(system_id):
    content = request.get_json()
    
    resp = ('OK', 200)
    try:
        # validate against the common ping format
        validate(content, common_schema)
        key = "{}.{}".format(content["type"], content["version"])

        # validate the schema based on mozilla-pipeline-schemas
        schema = schemas[system_id][key]
        validate(content, schema)
    except (ValidationError, KeyError) as e:
        resp = ("BAD: {}".format(e.message), 400)
    return resp


common_schema, schemas = load_data()

