# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import os

import rapidjson
from flask import Flask, request
from dockerflow.flask import Dockerflow


app = Flask(__name__)
dockerflow = Dockerflow(app)


def load_namespace(base, namespace):
    """Return a dictionary of all files with the `*.schema.json` suffix.

    Namespaces help differentiate ingestion systems. For example, `telemetry`
    refers to pings generated by various Firefox products. Other namespaced
    ingestion pipelines may exists due to generic ingestion.
    """
    schemas = dict()
    for root, _, files in os.walk(os.path.join(base, namespace)):
        for name in files:
            if not name.endswith(".schema.json"):
                continue
            with open(os.path.join(root, name), "r") as f:
                key = name.split(".schema.json")[0]
                schemas[key] = rapidjson.Validator(f.read())
                print("Registered {}.{} ".format(namespace, key))
    return schemas


def load_data():
    """Load schemas into memory while taking advantage of data preloading.
    
    See https://stackoverflow.com/a/42440784
    """

    # https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/data/common-ping.html
    common_schema = rapidjson.Validator(rapidjson.dumps({
            "properties": {
                "type": {"type": "string"},
                "id": {"type": "string"},
                "creationDate": {"type": "string"},
                "version": {"type": "integer"},
                },
            "required": ["type", "id", "creationDate", "version"],
            }))

    # Schemas have a naming convention. See `sync.sh` for an example of the ingestion
    # submission format.
    schemas = {}

    # List the separate data ingestion namespaces
    base = "resources/schemas"
    for system_id in os.listdir("resources/schemas"):
        schemas[system_id] = load_namespace(base, system_id)

    return common_schema, schemas


COMMON_SCHEMA, NAMESPACE_SCHEMAS = load_data()


@app.route('/<namespace>', methods=['POST'])
def index(namespace):
    # equivalent to `json.loads(request.data)`
    content = request.get_json()

    resp = ('OK', 200)
    try:
        # validate against the common ping format
        COMMON_SCHEMA(request.data)

        key = "{}.{}".format(content["type"], content["version"])
        NAMESPACE_SCHEMAS[namespace][key](request.data)
    except (ValueError, KeyError) as e:
        resp = ("BAD: {}".format(e), 400)
    return resp


